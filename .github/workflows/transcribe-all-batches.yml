name: YouTube Transcription (All Batches)

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      start_batch:
        description: 'Start from batch number (default: 1)'
        required: false
        default: '1'
      end_batch:
        description: 'End at batch number (default: 7)'
        required: false
        default: '7'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and cache Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: youtube-transcriber:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/transcriber-image.tar
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/transcriber-image.tar
        retention-days: 1

  process-batches:
    needs: build-docker
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max
    strategy:
      matrix:
        batch: [1, 2, 3, 4, 5, 6, 7]
      fail-fast: false  # Continue other batches even if one fails
      max-parallel: 1   # Process one batch at a time
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: |
        docker load --input /tmp/transcriber-image.tar
        docker image ls -a
        
    - name: Prepare batch ${{ matrix.batch }}
      run: |
        if [ -f "links_batch_${{ matrix.batch }}.txt" ]; then
          cp links_batch_${{ matrix.batch }}.txt links.txt
          echo "Processing batch ${{ matrix.batch }}"
          echo "Links in this batch:"
          cat links.txt | head -5
        else
          echo "Batch file links_batch_${{ matrix.batch }}.txt not found"
          exit 1
        fi
        
    - name: Run transcription for batch ${{ matrix.batch }}
      continue-on-error: true
      id: transcribe
      run: |
        echo "Starting batch ${{ matrix.batch }} at $(date)"
        docker run --rm \
          -v ${{ github.workspace }}:/app/output \
          youtube-transcriber:latest
        echo "Completed batch ${{ matrix.batch }} at $(date)"
        
    - name: List generated files
      run: |
        echo "Files generated:"
        ls -la transcript_*.txt || echo "No transcript files found"
        
    - name: Upload batch ${{ matrix.batch }} results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: transcriptions-batch-${{ matrix.batch }}
        path: transcript_*.txt
        retention-days: 30
        
    - name: Commit batch ${{ matrix.batch }} results
      if: steps.transcribe.outcome == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add transcript files if they exist
        if ls transcript_*.txt 1> /dev/null 2>&1; then
          git add transcript_*.txt
          
          # Create batch completion marker
          echo "Batch ${{ matrix.batch }} completed at $(date)" > batch_${{ matrix.batch }}_completed.txt
          git add batch_${{ matrix.batch }}_completed.txt
          
          # Commit if there are changes
          git diff --staged --quiet || git commit -m "Complete batch ${{ matrix.batch }}: Add transcriptions [$(date)]"
          git push
          
          echo "✅ Batch ${{ matrix.batch }} results saved to repository"
        else
          echo "❌ No transcript files found for batch ${{ matrix.batch }}"
        fi
        
    - name: Clean up for next batch
      if: always()
      run: |
        # Remove transcript files to prepare for next batch
        rm -f transcript_*.txt
        rm -f *.mp4 *.m4a *.webm *.mp3 *.wav
        echo "Cleaned up temporary files"

  summary:
    needs: process-batches
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate completion summary
      run: |
        echo "# Batch Processing Summary" > processing_summary.md
        echo "Generated at: $(date)" >> processing_summary.md
        echo "" >> processing_summary.md
        
        echo "## Completed Batches:" >> processing_summary.md
        for i in {1..7}; do
          if [ -f "batch_${i}_completed.txt" ]; then
            echo "- ✅ Batch $i: $(cat batch_${i}_completed.txt)" >> processing_summary.md
          else
            echo "- ❌ Batch $i: Not completed" >> processing_summary.md
          fi
        done
        
        echo "" >> processing_summary.md
        echo "## Next Steps:" >> processing_summary.md
        echo "1. Check individual batch artifacts for transcription files" >> processing_summary.md
        echo "2. Re-run failed batches if needed" >> processing_summary.md
        echo "3. All successful transcriptions are saved in the repository" >> processing_summary.md
        
        cat processing_summary.md
        
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: processing-summary
        path: processing_summary.md 